Elm.ContentIndex = Elm.ContentIndex || {};
Elm.ContentIndex.make = function (_elm) {
   "use strict";
   _elm.ContentIndex = _elm.ContentIndex || {};
   if (_elm.ContentIndex.values) return _elm.ContentIndex.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $String = Elm.String.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var decodeVoteResult = A2($Json$Decode.at,_U.list(["status"]),$Json$Decode.string);
   var viewContentOfficialAnswer = function (officialAnswer) {
      var _p0 = $String.isEmpty(officialAnswer);
      if (_p0 === true) {
            return A2($Html.div,_U.list([]),_U.list([$Html.text("No official answer yet")]));
         } else {
            return A2($Html.div,
            _U.list([$Html$Attributes.$class("official-answer")]),
            _U.list([A2($Html.span,_U.list([$Html$Attributes.$class("official-answer__header")]),_U.list([$Html.text("Official answer:")]))
                    ,A2($Html.span,_U.list([]),_U.list([$Html.text(officialAnswer)]))]));
         }
   };
   var viewContentStatus = function (status) {
      var statusText = function () {
         var _p1 = status;
         switch (_p1)
         {case "new": return "new";
            case "in_progress": return "in progress";
            case "solved": return "solved";
            default: return "";}
      }();
      var labelColor = function () {
         var _p2 = status;
         switch (_p2)
         {case "new": return "label-danger";
            case "in_progress": return "label-warning";
            case "solved": return "label-success";
            default: return "label-default";}
      }();
      return A2($Html.span,
      _U.list([$Html$Attributes.$class(A2($Basics._op["++"],"view-content__status label ",labelColor))]),
      _U.list([$Html.text(statusText)]));
   };
   var ReceivedVoteResult = function (a) {    return {ctor: "ReceivedVoteResult",_0: a};};
   var sendVote = F2(function (content,voteType) {
      var voteTypeStr = function () {    var _p3 = voteType;if (_p3.ctor === "Up") {    return "for";} else {    return "Down";}}();
      var url = A2($Http.url,
      "/api/votes",
      _U.list([{ctor: "_Tuple2",_0: "vote[content_id]",_1: $Basics.toString(content.id)},{ctor: "_Tuple2",_0: "vote[vote_type]",_1: voteTypeStr}]));
      return $Effects.task(A2($Task.map,ReceivedVoteResult,$Task.toMaybe(A3($Http.post,decodeVoteResult,url,$Http.empty))));
   });
   var RequestVote = F2(function (a,b) {    return {ctor: "RequestVote",_0: a,_1: b};});
   var UpdateFilter = function (a) {    return {ctor: "UpdateFilter",_0: a};};
   var viewSearchForm = F2(function (address,model) {
      return A2($Html.form,
      _U.list([$Html$Attributes.$class("form-inline")]),
      _U.list([A2($Html.div,
              _U.list([$Html$Attributes.$class("form-group")]),
              _U.list([A2($Html.label,_U.list([$Html$Attributes.$for("filterInput")]),_U.list([$Html.text("Search for something")]))
                      ,A2($Html.input,
                      _U.list([A3($Html$Events.on,"input",$Html$Events.targetValue,function (str) {    return A2($Signal.message,address,UpdateFilter(str));})
                              ,$Html$Attributes.type$("text")
                              ,$Html$Attributes.$class("form-control")
                              ,$Html$Attributes.id("filterInput")]),
                      _U.list([]))]))
              ,A2($Html.a,
              _U.list([$Html$Attributes.type$("submit")
                      ,$Html$Attributes.$class("btn btn-default")
                      ,$Html$Attributes.href(A2($Basics._op["++"],"/contents/new?label=",model.filter))]),
              _U.list([$Html.text("Create a new one")]))]));
   });
   var SetContents = function (a) {    return {ctor: "SetContents",_0: a};};
   var Down = {ctor: "Down"};
   var Up = {ctor: "Up"};
   var viewContentVoteComponent = F2(function (address,content) {
      var voteDownButton = A2($Html.span,
      _U.list([$Html$Attributes.$class("btn btn-default view-content__vote__button"),A2($Html$Events.onClick,address,A2(RequestVote,content,Down))]),
      _U.list([$Html.text("⬇")]));
      var voteScore = A2($Html.span,_U.list([$Html$Attributes.$class("view-content__vote__score")]),_U.list([$Html.text($Basics.toString(content.voteScore))]));
      var voteUpButton = A2($Html.a,
      _U.list([$Html$Attributes.$class("btn btn-default view-content__vote__button"),A2($Html$Events.onClick,address,A2(RequestVote,content,Up))]),
      _U.list([$Html.text("⬆")]));
      return A2($Html.div,_U.list([$Html$Attributes.$class("view-content__vote")]),_U.list([voteUpButton,voteScore,voteDownButton]));
   });
   var viewContent = F2(function (address,content) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("view-content")]),
      _U.list([A2(viewContentVoteComponent,address,content)
              ,A2($Html.div,
              _U.list([$Html$Attributes.$class("panel panel-default")]),
              _U.list([A2($Html.div,
                      _U.list([$Html$Attributes.$class("panel-heading")]),
                      _U.list([A2($Html.h3,_U.list([$Html$Attributes.$class("panel-title")]),_U.list([$Html.text(content.label)]))
                              ,viewContentStatus(content.status)]))
                      ,A2($Html.div,
                      _U.list([$Html$Attributes.$class("panel-body")]),
                      _U.list([A2($Html.div,_U.list([]),_U.list([$Html.text(content.description)]))]))
                      ,A2($Html.div,_U.list([$Html$Attributes.$class("panel-footer")]),_U.list([viewContentOfficialAnswer(content.officialAnswer)]))]))]));
   });
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.div,_U.list([$Html$Attributes.$class("bs-callout")]),_U.list([A2(viewSearchForm,address,model)]))
              ,A2($Html.div,_U.list([]),A2($List.map,viewContent(address),model.contents))]));
   });
   var Content = F8(function (a,b,c,d,e,f,g,h) {
      return {id: a,label: b,description: c,officialAnswer: d,status: e,contentType: f,voteScore: g,voteForCurrentUser: h};
   });
   var decodeContents = function () {
      var content = A9($Json$Decode.object8,
      F8(function (id,label,desc,oAnswer,status,cType,voteScore,voted) {    return A8(Content,id,label,desc,oAnswer,status,cType,voteScore,voted);}),
      A2($Json$Decode._op[":="],"id",$Json$Decode.$int),
      A2($Json$Decode._op[":="],"label",$Json$Decode.string),
      A2($Json$Decode._op[":="],"description",$Json$Decode.string),
      A2($Json$Decode._op[":="],"officialAnswer",$Json$Decode.string),
      A2($Json$Decode._op[":="],"status",$Json$Decode.string),
      A2($Json$Decode._op[":="],"type",$Json$Decode.string),
      A2($Json$Decode._op[":="],"voteScore",$Json$Decode.$int),
      $Json$Decode.maybe(A2($Json$Decode._op[":="],"voteForCurrentUser",$Json$Decode.string)));
      return A2($Json$Decode.at,_U.list(["data"]),$Json$Decode.list(content));
   }();
   var fetchContents = function (filterStr) {
      var url = A2($Http.url,"/api/contents",_U.list([{ctor: "_Tuple2",_0: "filter",_1: filterStr}]));
      return $Effects.task(A2($Task.map,SetContents,$Task.toMaybe(A2($Http.get,decodeContents,url))));
   };
   var update = F2(function (action,model) {
      var _p4 = action;
      switch (_p4.ctor)
      {case "SetContents": var newContents = A2($Maybe.withDefault,model.contents,_p4._0);
           var newModel = _U.update(model,{contents: newContents});
           return {ctor: "_Tuple2",_0: newModel,_1: $Effects.none};
         case "UpdateFilter": var _p5 = _p4._0;
           var newModel = _U.update(model,{filter: _p5});
           return {ctor: "_Tuple2",_0: newModel,_1: fetchContents(_p5)};
         case "RequestVote": return {ctor: "_Tuple2",_0: model,_1: A2(sendVote,_p4._0,_p4._1)};
         default: var _p6 = _p4._0;
           if (_p6.ctor === "Just" && _p6._0 === "ok") {
                 return {ctor: "_Tuple2",_0: model,_1: fetchContents(model.filter)};
              } else {
                 return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
              }}
   });
   var Model = F2(function (a,b) {    return {contents: a,filter: b};});
   var init = {ctor: "_Tuple2",_0: A2(Model,_U.list([]),""),_1: fetchContents("")};
   var app = $StartApp.start({init: init,update: update,view: view,inputs: _U.list([])});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   return _elm.ContentIndex.values = {_op: _op
                                     ,Model: Model
                                     ,Content: Content
                                     ,init: init
                                     ,Up: Up
                                     ,Down: Down
                                     ,SetContents: SetContents
                                     ,UpdateFilter: UpdateFilter
                                     ,RequestVote: RequestVote
                                     ,ReceivedVoteResult: ReceivedVoteResult
                                     ,update: update
                                     ,view: view
                                     ,viewContent: viewContent
                                     ,viewContentVoteComponent: viewContentVoteComponent
                                     ,viewContentStatus: viewContentStatus
                                     ,viewContentOfficialAnswer: viewContentOfficialAnswer
                                     ,viewSearchForm: viewSearchForm
                                     ,fetchContents: fetchContents
                                     ,decodeContents: decodeContents
                                     ,sendVote: sendVote
                                     ,decodeVoteResult: decodeVoteResult
                                     ,app: app
                                     ,main: main};
};